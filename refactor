NB: This is outdated!

Authentication
==============
Anna^ keeps track of authentications with a sqlite table. Authentications can 
be hooked to nickserv-registration (so registered users automagically are 
authenticated). Anna^ will clear the authentication table upon initial startup, 
unless explicitly told not to (if you wish to keep peoples auths during an 
upgrade or the like. There _shouldn't_ be a problem with this, since auth's 
will be cross-referenced with user hostmasks/cloaks.


Heap-object:

$heap
	irc	=> irc-object
	auth	=>
		<host> =>
			user	=> <username>
			nick 	=> <irc_nick>
	modules	=>
		<module_name>	=>
			[local module-heap]
	
Modules
=======
Each module reside in a separate namespace under Anna::Module (e.g. 
Anna::Module::haiku). On load, the module is eval'd in that particular 
namespace. 
Here, it can hook up to various commands via the Anna::command_bind function, 
match regexps via Anna::regexp_bind and more. When an appropriate command is 
found, Anna^ will call the Anna::Module::module_name::sub that's associated with
the specific command. On unload, the namespace Anna::Module::module_name is 
destroyed (is this possible?) [I think not, but we might be able to override it
with an empty enviroment]

Each module has it's own sqlite database under CONFIGDIR/.anna/registry/ that 
can be used for persistent storage. A database handle is included in the 
module-object that is passed along on each command/event/regexp-bound sub.
You can also request a database handle with Anna::DB->new('module_name'). So 
for instance Anna::DB->new('haiku') will return a database handle for the haiku 
module.

Possible to handle commands with POE-events using postback and callback 
instead? Might make module-loading a whole lot easier.

Git-stuff
========
git-clone git://frokostgruppen.dk/var/cache/git/anna.git
git-commit, git-push and so on

Multiple networks
Each network is assigned a session. Default session
handlers will handle events for single sessions.
This means it's not directly possible (or rather, 
somewhat messy) to access stack-information for 
another network. As of this time, it seems like a 
reasonable constraint.
The Heap
--------
The heap will be passed as the first argument whenever a module-function is 
called. From the heap, there will be access to the bots configuration, database
handle and more.

The basic layout are as follows:

#$heap->{config}
#Holds a reference to the configuration object of the bot. From here, you can 
#read and write configuration-details. Refer to the config-documentation for 
#more info on this.
REPLACE WITH ACTUAL CONFIG-STUFF

$heap->{irc}
Holds a reference to the active irc-object. You should rarely, if ever have 
need for this, but from here, you can issue commands to the PoCo::IRC-session.
Use with care and refer to Poe::Component::IRC's docs for more info.

$heap->{dbh}
Holds a reference to the active database-handle as returned by the DBI-module.
Use this to access the bot's database.

#$heap->{auth}
#The heapspace for authentications. Refer to the auth-docs for more info on the 
#layout of this.
REPLACE WITH ACTUAL AUTH-STUFF

$heap->{log}
This is the logfile for the core of anna... don't mess with it.

$heap->{modules}
This holds the local storage-space for each loaded bot-module. 
$heap->{module}->{[MODULE_NAME]} holds a reference to a hash for use by the
individual modules themselves. To keep this clean (and for other hopefully 
obvious reasons), the bot will refuse to load a module if an already loaded 
module has the same name.
$heap->{module}->{log} contains an object the module can write log-messages to.
The format is quite simple, $heap->{module}->{log}->write(<your_message>). This
returns 1 on success, 0 otherwise. If the bot-owner have decided to turn off 
logging, the object will still exist and the write will return 1, but nothing 
will be written to the logfile. Refer to the module-docs for more info on this.

Network-structure in the heap
-----------------------------
The heap will reflect the general network-structure in the following way:
$heap->{network}->{$network}->{$target} where target is any channel or person 
Anna^ talks with.
Each target will have a log-entry: ...->{$target}->{log} which points to the 
log-object associated with the target.
