TODO for module-refactoring:

* Memory!
 * Look into reducing the number of active DB handles. Each module has one stored
 * Find out what is actually stored where

* Implement support for binding regexps
  * Add support for specifying flags

* Implement support for binding to specific events
 * We will need our own event dispatcher, as POE's can't bind more than one
   sub to any given event. The simplest solution appears to be a new Anna::Event
   module that listens for ALL events and allows you to register an event-handler 
   with an event. Anna::Module::bindevent can then make use of this, and all the 
   standard event handlers can do so too. Any unbound event is just forwarded to
   Anna::Debug::_default

* Implement onunload, onwhatelse?

* Dynamic module-loading (that is, allow admins to issue 'load foo' to load 
  module foo)
 * Works, but currently all registered users can do this. Needs user_can from
   auth stuff

* Flesh out a sane interface for module-building 
  * We need easy way to
   * Print a response to the target - done
   * Print a response to the target highlighting the nickname that sent the
     message - done
   * Print a response to the nick the sent the message
   * Remove bindings
   * Bind to events (needs our own event-handler)

* EXTENSIVE TESTING OF MODULE-RELATED FAILURES (e.g. modules crashing, failing 
  to compile, doing funky stuff when loaded, issuing 'die' at weird times and 
  so on).

* Move existing stuff into modules

* Proper first-run dialog that allows you to
 * Create root-user
 * Create basic config (network, channel)
 * Nickserv info
 * Other stuff?

* Database handling
 * Move to something more abstract for Anna^'s internal database
 * Generate the core database on the fly for new users

Modules todo:
 * Nickserv - handle authentication towards nickserv
   Simple interface and possibility to set specific nickserv command
 * Auth - handle authentication towards the bot
   * Modules can check if a user is in a given role
     e.g. $auth->user_can('Nick::Change'); returns true if the user is in the Nick::Change role.
   * Auth itself handles authentication, keeping track of sessions and mapping users to roles
   * Root-user can attach roles to users
     e.g. !auth add $user to $role
   * Subroles. If a user has Role1 she automatically has Role1::*
     Thus, the root-user has *, another user might have Nick and thus also Nick::Change
   * Unregistered users are 'anonymous'. So !auth add anonymous to RSS::Addfeed grants everyone access to RSS::Addfeed
   * !auth add $user to * grants $user Root-access (ie. access to every command, feature and so on)
 * Channel - handle joins/parts
 * Existing modules
